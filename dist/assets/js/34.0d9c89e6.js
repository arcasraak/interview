(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{261:function(n,t,a){"use strict";a.r(t);var s=a(0),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"学习笔记-阿里云ecs容器服务配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习笔记-阿里云ecs容器服务配置","aria-hidden":"true"}},[n._v("#")]),n._v(" 学习笔记-阿里云ECS容器服务配置")]),n._v(" "),a("blockquote",[a("p",[n._v("LNMN 环境代表 Linux 系统下 Nginx + MySQL + Nodejs 网站服务器架构。本文档介绍 CentOS 下的 LNMN 环境搭建。")]),n._v(" "),a("p",[n._v("Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、 bare metal、OpenStack 集群和其他的基础应用平台。")])]),n._v(" "),a("p",[n._v("Docker通常用于如下场景：")]),n._v(" "),a("ul",[a("li",[n._v("web 应用的自动化打包和发布；")]),n._v(" "),a("li",[n._v("自动化测试和持续集成、发布；")]),n._v(" "),a("li",[n._v("在服务型环境中部署和调整数据库或其他的后台应用；")]),n._v(" "),a("li",[n._v("从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的PaaS环境。")])]),n._v(" "),a("h2",{attrs:{id:"我要做甚么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我要做甚么？","aria-hidden":"true"}},[n._v("#")]),n._v(" 我要做甚么？")]),n._v(" "),a("p",[n._v("我自己用 centos 配置了自己的网站，但是考虑到以后可能要换服务器，不想再配置一次，节省劳动力，所以想把服务器配置搬到Docker，一劳永逸。\ndocker_centos 主要是网站配置和网站数据访问，之后的服务器登录依然先登录服务器再登录docker_centos")]),n._v(" "),a("h2",{attrs:{id:"开始学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始学习","aria-hidden":"true"}},[n._v("#")]),n._v(" 开始学习")]),n._v(" "),a("blockquote",[a("p",[n._v("Docker 命令大全")]),n._v(" "),a("blockquote",[a("p",[n._v("http://www.runoob.com/docker/docker-command-manual.html")])])]),n._v(" "),a("ol",[a("li",[n._v("安装 windows 10 docker")])]),n._v(" "),a("p",[n._v("先把系统升级到专业版，再从官网注册并下载docker for Windows 10")]),n._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[n._v("确定centos为服务器版本，那就开始：")])]),n._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# CMD 检查安装")]),n._v("\ndocker version  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 搜索 centos 公共镜像")]),n._v("\ndocker search centos\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 下载")]),n._v("\ndocker pull centos\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 查看下载")]),n._v("\ndocker image "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("ls")]),n._v(" -a\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 删除 image")]),n._v("\ndocker rmi centos\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 容器操作")]),n._v("\ndocker run "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("image name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\ndocker stop "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("container name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\ndocker start "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("container name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\ndocker restart "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("container name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("kill")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("container name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# shell 交互模式运行 centos image 作为容器")]),n._v("\ndocker run --privileged --cap-add SYS_ADMIN -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n._v("container")]),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("docker -it --name my_centos -p "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("80")]),n._v(":80 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("3306")]),n._v(":3306 -d  --restart"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("always centos /usr/sbin/init\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 这个命令用来建立一个CENTOS的容器。把80端口映射到容器的8080端口。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# --privileged 指定容器是否是特权容器。这里开启特权模式。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# --cap-add SYS_ADMIN 添加系统的权限。不然，系统很多功能都用不了的。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# -e container=docker 设置容器的类型。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# -it 启动互动模式。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# /usr/sbin/init  初始容器里的CENTOS。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 以上的参数是必需的。不然，建立的CENTOS容器不能正常使用和互动。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 如果没有-it参数，容器会不停启动。")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 如果没有初始化和特权等等的开关，就不能使用systemctl。所以，以上的开关和设置是一样不能少的。")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 进入容器")]),n._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("exec")]),n._v(" -it my_centos /bin/bash\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 交互模式下查看centos 版本")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("cat")]),n._v(" /etc/redhat-release\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 安装网络工具（可选）")]),n._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v(" net-tools\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 至此centos 镜像以作为容器运行，然后就是常规操作配置centos")]),n._v("\n")])])]),a("p",[a("b",[n._v("划重点：从这里开始，如果中途退出并kill rm 容器，容器将变回初始状态")])]),n._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[n._v("centos 安装 node")])]),n._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 安装 nodejs")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("curl")]),n._v(" --silent --location https://rpm.nodesource.com/setup_8.x "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("|")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("bash")]),n._v(" -\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v(" -y nodejs\nnode -v\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" -v\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[n._v("centos 安装 mariadb")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 卸载\nyum remove mariadb\nrm -rf /var/lib/mysql/\nrm -rf /etc/my.cnf\n\n# 搜索 MariaDB 现有的包\nrpm -qa | grep MariaDB\n# 如果存在（删不了的话，就一个一个删），全部删除\nrpm -e --nodeps MariaDB-\\*\n\n# 开始新的安装, 创建 MariaDB.repo 文件\n\nvim /etc/yum.repos.d/mariadb.repo\n\nmariadb]\nname = mariadb\nbaseurl = http://yum.mariadb.org/10.4/centos7-amd64\ngpgkey = https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n\n# 安装 MariaDB\nyum install -y MariaDB-server MariaDB-client\n\n\n# 启动 MariaDB 服务，并设为开机自启\nsystemctl start mariadb #启动服务\nsystemctl enable mariadb #设置开机启动\nsystemctl restart mariadb #重新启动\nsystemctl stop mariadb.service #停止 MariaDB\n\n# 登录到数据库用,此时 root 账户的密码为空，直接回车即可，退出 Mariadb，exit；即可\nmysql -uroot -p\n\n# 进行 MariaDB 的相关简单配置(可选)\nmysql_secure_installation\n\n    首先是设置密码，会提示先输入密码\n    Enter current password for root (enter for none):<–初次运行直接回车\n    设置密码\n    Set root password? [Y/n] <– 是否设置root用户密码，输入y并回车或直接回车\n    New password: <– 设置root用户的密码\n    Re-enter new password: <– 再输入一次你设置的密码\n    其他配置\n    Remove anonymous users? [Y/n] <– 是否删除匿名用户，回车\n    Disallow root login remotely? [Y/n] <–是否禁止root远程登录,回车（后面授权配置）\n    Remove test database and access to it? [Y/n] <– 是否删除test数据库，回车\n    Reload privilege tables now? [Y/n] <– 是否重新加载权限表，回车\n\n# 修改默认密码(可选)\nuse mysql;\nupdate user set password=PASSWORD(\"你的密码\") where user='root';\n\n# 授予外网登录和所有操作权限 %\ngrant all privileges on *.* to root@'%' identified by '你的密码';\n\n# 刷新权限\nflush privileges; \n\n# 删除用户\ndrop user zhangsan@'%';\n\n")])])]),a("h2",{attrs:{id:"安装-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-nginx","aria-hidden":"true"}},[n._v("#")]),n._v(" 安装 Nginx")]),n._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[n._v("rpm")]),n._v(" -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v(" -y nginx\nsystemctl start nginx.service\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("enable")]),n._v(" nginx.service\nyum info nginx\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 查看容器IP地址")]),n._v("\ndocker inspect "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("name/id"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("\n")])])]),a("h2",{attrs:{id:"上传发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传发布","aria-hidden":"true"}},[n._v("#")]),n._v(" 上传发布")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("docker push 注册用户名/镜像名\n\n## 修改本地镜像名\ndocker tag lnmn pch1024/lnmn \ndocker push pch1024/lnmn:latest\n\n\n")])])]),a("h2",{attrs:{id:"导出备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出备份","aria-hidden":"true"}},[n._v("#")]),n._v(" 导出备份")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('# docker export [OPTIONS] CONTAINER\ndocker export --output="pch1024/lnmn.tar" my_lnmn\n\n')])])]),a("h2",{attrs:{id:"进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶","aria-hidden":"true"}},[n._v("#")]),n._v(" 进阶")]),n._v(" "),a("p",[n._v("进一步优化镜像文件的大小需要 自己手写 dockerfile ，未完待续")])])}),[],!1,null,null,null);t.default=e.exports}}]);